use std::net::Ipv4Addr;

use rcgen::{CertificateParams, DistinguishedName, DnType, RcgenError, SanType};

/// The common name of the identity certificate generated by sd-p2p.
const CERTIFICATE_COMMON_NAME: &'static str = "sd-p2p-identity";

/// Identity is the certificate and private key which identify the current node. The [PeerId] is derived from the [Identity].
#[derive(Clone)]
pub struct Identity {
	cert: Vec<u8>,
	key: Vec<u8>,
}

impl Identity {
	/// Create a new Identity for the current node.
	pub fn new() -> Result<Self, RcgenError> {
		let mut params: CertificateParams = Default::default();
		params.distinguished_name = DistinguishedName::new();
		params
			.distinguished_name
			.push(DnType::CommonName, CERTIFICATE_COMMON_NAME);
		params.subject_alt_names = vec![SanType::IpAddress(Ipv4Addr::LOCALHOST.into())];
		let cert = rcgen::Certificate::from_params(params)?;

		Ok(Self {
			cert: cert.serialize_der()?,
			key: cert.serialize_private_key_der(),
		})
	}

	/// Load the current identity from it's raw form.
	pub fn from_raw(cert: Vec<u8>, key: Vec<u8>) -> Result<Self, RcgenError> {
		Ok(Self { cert, key })
	}

	/// Convert this identity into it's raw form so it can be saved.
	pub fn to_raw(&self) -> (Vec<u8>, Vec<u8>) {
		(self.cert.clone(), self.key.clone())
	}

	/// Convert this identity into rustls compatible form so it can be used for the QUIC TLS handshake.
	pub fn into_rustls(self) -> (rustls::Certificate, rustls::PrivateKey) {
		(rustls::Certificate(self.cert), rustls::PrivateKey(self.key))
	}
}
